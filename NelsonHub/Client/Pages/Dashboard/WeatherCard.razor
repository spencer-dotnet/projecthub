@inject IHttpService _http
@inject StateContainer StateContainer

@using NelsonHub.Shared.NWS

<div class="card">
    <div class="card-header">
        <h3>Weather</h3>
        @if (today != null)
        {
            <p>@today.Name : @today.DetailedForecast</p>
        }
        else
        {
            <p>Loading...</p>
        }
        <button class="btn btn-primary" type="button" data-toggle="collapse"
                data-target="#collapseForecast" aria-expanded="false" aria-controls="collapseForecast">
            Weekly Forecast
        </button>

    </div>
    <div class="collapse" id="collapseForecast">
        <div class="card-body" style="max-height: 300px; overflow-y:auto">
            @if (forecast == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <ul class="list-group list-group-flush">
                    @for(int i = 1; i < forecast.Length; i++)
                    {
                        var day = forecast[i];

                        <li class="list-group-item">
                            <b>@day.Name</b>: 
                            @day.DetailedForecast
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

    @code {
        private AwsPeriodModel[] forecast;
        private AwsPeriodModel today;
        private AwsPeriodModel tonight;

        protected override async Task OnInitializedAsync()
        {
            StateContainer.OnChange += StateHasChanged;

            forecast = StateContainer.CurrentForecast;

            if (forecast == null)
            {
                forecast = await _http.Get<AwsPeriodModel[]>("api/weatherforecast");
                today = forecast[0];
                tonight = forecast[1];

                StateContainer.SetCurrentForecast(forecast);

                StateHasChanged();
            }
            else
            {
                today = forecast[0];
                tonight = forecast[1];
            }
        }

        public void Dispose()
        {
            StateContainer.OnChange -= StateHasChanged;
        }

    }
